
# The type of line endings
newlines                                 = auto     # auto/lf/crlf/cr

# The original size of tabs in the input
input_tab_size                           = 4

# The size of tabs in the output (only used if align_with_tabs=true)
output_tab_size                          = 4

# The ascii value of the string escape char, usually 92 (\) or 94 (^). (Pawn)
string_escape_char                       = 92       # number

# Alternate string escape char for Pawn. Only works right before the quote char.
string_escape_char2                      = 0

#
# Indenting
#

# The number of columns to indent per level.
# Usually 2, 3, 4, or 8.
indent_columns                           = 4

# How to use tabs when indenting code
# 0=spaces only
# 1=indent with tabs, align with spaces
# 2=indent and align with tabs
indent_with_tabs                         = 2

# Whether to indent strings broken by '\' so that they line up
indent_align_string                      = false

# The number of spaces to indent multi-line XML strings.
# Requires indent_align_string=True
indent_xml_string                        = 0

# Spaces to indent '{' from level
indent_brace                             = 0

# Whether braces are indented to the body level
indent_braces                            = false

# Disabled indenting function braces if indent_braces is true
indent_braces_no_func                    = false

indent_brace_parent                      = false
indent_namespace                         = false
indent_extern                            = false
indent_class                             = true
indent_class_colon                       = false
indent_else_if                           = false

# Amount to indent variable declarations after a open brace. neg=relative, pos=absolute
indent_var_def_blk                       = 0

# True:  indent continued function call parameters one indent level
# False: align parameters under the open paren
indent_func_call_param                   = false

# Same as indent_func_call_param, but for function defs
indent_func_def_param                    = true

# Same as indent_func_call_param, but for function protos
indent_func_proto_param                  = true

# Same as indent_func_call_param, but for class declarations
indent_func_class_param                  = false

# Same as indent_func_call_param, but for class variable constructors
indent_func_ctor_var_param               = false

# Same as indent_func_call_param, but for templates
indent_template_param                    = false

# Double the indent for indent_func_xxx_param options
indent_func_param_double                 = false

# Indentation column for standalone 'const' function decl/proto qualifier
indent_func_const                        = 0

# Indentation column for standalone 'throw' function decl/proto qualifier
indent_func_throw                        = 0

# The number of spaces to indent a continued '->' or '.'
# Usually set to 0, 1, or indent_columns.
indent_member                            = 0

# Spaces to indent single line ('//') comments on lines before code
indent_sing_line_comments                = 0

# If set, will indent trailing single line ('//') comments relative
# to the code instead of trying to keep the same absolute column
indent_relative_single_line_comments     = false

# Spaces to indent 'case' from 'switch'
# Usually 0 or indent_columns.
indent_switch_case                       = indent_columns

# Spaces to shift the 'case' line, without affecting any other lines
# Usually 0.
indent_case_shift                        = 0

# Spaces to indent '{' from 'case'.
# By default, the brace will appear under the 'c' in case.
# Usually set to 0 or indent_columns.
indent_case_brace                        = 0

# Whether to indent comments found in first column
indent_col1_comment                      = false

# How to indent goto labels
#  >0 : absolute column where 1 is the leftmost column
#  <=0 : subtract from brace indent
indent_label                             = 1

# Same as indent_label, but for access specifiers that are followed by a colon
indent_access_spec                       = 1

# Indent the code after an access specifier by one level.
# If set, this option forces 'indent_access_spec=0'
indent_access_spec_body                  = false

# If an open paren is followed by a newline, indent the next line so that it lines up after the open paren (not recommended)
indent_paren_nl                          = false

# Controls the indent of a close paren after a newline.
# 0: Indent to body level
# 1: Align under the open paren
# 2: Indent to the brace level
indent_paren_close                       = 0

# Controls the indent of a comma when inside a paren.If TRUE, aligns under the open paren
indent_comma_paren                       = false

# Controls the indent of a BOOL operator when inside a paren.If TRUE, aligns under the open paren
indent_bool_paren                        = false

# If an open square is followed by a newline, indent the next line so that it lines up after the open square (not recommended)
indent_square_nl                         = false

# Don't change the relative indent of ESQL/C 'EXEC SQL' bodies
indent_preserve_sql                      = false

# Align continued statements at the '='. Default=True
# If FALSE or the '=' is followed by a newline, the next line is indent one tab.
indent_align_assign                      = true


# Spacing options


# Add or remove space around arithmetic operator '+', '-', '/', '*', etc
sp_arith                                 = add

# Add or remove space around assignment operator '=', '+=', etc
sp_assign                                = add

# Add or remove space before assignment operator '=', '+=', etc. Overrides sp_assign.
sp_before_assign                         = add

# Add or remove space after assignment operator '=', '+=', etc. Overrides sp_assign.
sp_after_assign                          = add

# Add or remove space around assignment '=' in enum
sp_enum_assign                           = ignore

# Add or remove space before assignment '=' in enum. Overrides sp_enum_assign.
sp_enum_before_assign                    = ignore

# Add or remove space after assignment '=' in enum. Overrides sp_enum_assign.
sp_enum_after_assign                     = ignore

# Add or remove space around boolean operators '&&' and '||'
sp_bool                                  = add

# Add or remove space around compare operator '<', '>', '==', etc
sp_compare                               = add

# Add or remove space inside '(' and ')'
sp_inside_paren                          = remove

# Add or remove space between nested parens
sp_paren_paren                           = ignore

# Whether to balance spaces inside nested parens
sp_balance_nested_parens                 = false

# Add or remove space between ')' and '{'
sp_paren_brace                           = ignore

# Add or remove space before pointer star '*'
sp_before_ptr_star                       = add

# Add or remove space before pointer star '*' that isn't followed by a variable name
# If set to 'ignore', sp_before_ptr_star is used instead.
sp_before_unnamed_ptr_star               = add

# Add or remove space between pointer stars '*'
sp_between_ptr_star                      = remove

# Add or remove space after pointer star '*', if followed by a word.
sp_after_ptr_star                        = remove

# Add or remove space after a pointer star '*', if followed by a func proto/def.
sp_after_ptr_star_func                   = ignore

# Add or remove space before a pointer star '*', if followed by a func proto/def.
sp_before_ptr_star_func                  = ignore

# Add or remove space before a reference sign '&'
sp_before_byref                          = ignore

# Add or remove space before a reference sign '&' that isn't followed by a variable name
# If set to 'ignore', sp_before_byref is used instead.
sp_before_unnamed_byref                  = ignore

# Add or remove space after reference sign '&', if followed by a word.
sp_after_byref                           = ignore

# Add or remove space after a reference sign '&', if followed by a func proto/def.
sp_after_byref_func                      = ignore

# Add or remove space before a reference sign '&', if followed by a func proto/def.
sp_before_byref_func                     = ignore

# Add or remove space between type and word
sp_after_type                            = force 

# Add or remove space in 'template <' vs 'template<'.
# If set to ignore, sp_before_angle is used.
sp_template_angle                        = ignore

# Add or remove space before '<>'
sp_before_angle                          = add

# Add or remove space inside '<' and '>'
sp_inside_angle                          = ignore

# Add or remove space after '<>'
sp_after_angle                           = ignore

# Add or remove space between '<>' and '(' as found in 'new List<byte>();'
sp_angle_paren                           = ignore

# Add or remove space between '<>' and a word as in 'List<byte> m;'
sp_angle_word                            = ignore

# Add or remove space before '(' of 'if', 'for', 'switch', and 'while'
sp_before_sparen                         = add

# Add or remove space inside if-condition '(' and ')'
sp_inside_sparen                         = remove

# Add or remove space before if-condition ')'. Overrides sp_inside_sparen.
sp_inside_sparen_close                   = ignore

# Add or remove space after ')' of 'if', 'for', 'switch', and 'while'
sp_after_sparen                          = add

# Add or remove space between ')' and '{' of 'if', 'for', 'switch', and 'while'
sp_sparen_brace                          = add

# Add or remove space before empty statement ';' on 'if', 'for' and 'while'
sp_special_semi                          = ignore

# Add or remove space before ';'
sp_before_semi                           = ignore

# Add or remove space before ';' in non-empty 'for' statements
sp_before_semi_for                       = ignore

# Add or remove space before a semicolon of an empty part of a for statment.
sp_before_semi_for_empty                 = ignore

# Add or remove space after the final semicolon of an empty part of a for statment: for ( ; ; <here> ).
sp_after_semi_for_empty                  = ignore

# Add or remove space before '[' (except '[]')
sp_before_square                         = ignore

# Add or remove space before '[]'
sp_before_squares                        = ignore

# Add or remove space inside '[' and ']'
sp_inside_square                         = ignore

# Add or remove space after ','
sp_after_comma                           = add

# Add or remove space before ','
sp_before_comma                          = ignore

# Add or remove space after class ':'
sp_after_class_colon                     = ignore

# Add or remove space before class ':'
sp_before_class_colon                    = ignore

# Add or remove space before case ':'
sp_before_case_colon                     = remove

# Add or remove space between 'operator' and operator sign
sp_after_operator                        = ignore

# Add or remove space between the operator symbol and the open paren, as in 'operator ++('
sp_after_operator_sym                    = ignore

# Add or remove space after C/D cast, ie 'cast(int)a' vs 'cast(int) a' or '(int)a' vs '(int) a'
sp_after_cast                            = ignore

# Add or remove spaces inside cast parens
sp_inside_paren_cast                     = ignore

# Add or remove space between the type and open paren in a C++ cast, ie 'int(exp)' vs 'int (exp)'
sp_cpp_cast_paren                        = ignore

# Add or remove space between 'sizeof' and '('
sp_sizeof_paren                          = ignore

# Add or remove space after the tag keyword (Pawn)
sp_after_tag                             = ignore

# Add or remove space inside enum '{' and '}'
sp_inside_braces_enum                    = ignore

# Add or remove space inside struct/union '{' and '}'
sp_inside_braces_struct                  = ignore

# Add or remove space inside '{' and '}'
sp_inside_braces                         = ignore

# Add or remove space inside '{}'
sp_inside_braces_empty                   = ignore

# Add or remove space between return type and function name
# A minimum of 1 is forced except for pointer return types.
sp_type_func                             = ignore

# Add or remove space between function name and '(' on function declaration
sp_func_proto_paren                      = remove

# Add or remove space between function name and '(' on function definition
sp_func_def_paren                        = remove

# Add or remove space inside empty function '()'
sp_inside_fparens                        = ignore

# Add or remove space inside function '(' and ')'
sp_inside_fparen                         = ignore

# Add or remove space between ']' and '(' when part of a function call.
sp_square_fparen                         = ignore

# Add or remove space between ')' and '{' of function
sp_fparen_brace                          = add

# Add or remove space between function name and '(' on function calls
sp_func_call_paren                       = remove

# Add or remove space between the user function name and '(' on function calls
# You need to set a keyword to be a user function, like this: 'set func_call_user _' in the config file.
sp_func_call_user_paren                  = ignore

# Add or remove space between a constructor/destructor and the open paren
sp_func_class_paren                      = ignore

# Add or remove space between 'return' and '('
sp_return_paren                          = add

# Add or remove space between '__attribute__' and '('
sp_attribute_paren                       = ignore

# Add or remove space between 'defined' and '(' in '#if defined (FOO)'
sp_defined_paren                         = ignore

# Add or remove space between 'throw' and '(' in 'throw (something)'
sp_throw_paren                           = ignore

# Add or remove space between macro and value
sp_macro                                 = ignore

# Add or remove space between macro function ')' and value
sp_macro_func                            = ignore

# Add or remove space between 'else' and '{' if on the same line
sp_else_brace                            = ignore

# Add or remove space between '}' and 'else' if on the same line
sp_brace_else                            = ignore

# Add or remove space between '}' and the name of a typedef on the same line
sp_brace_typedef                         = ignore

# Add or remove space between 'catch' and '{' if on the same line
sp_catch_brace                           = ignore

# Add or remove space between '}' and 'catch' if on the same line
sp_brace_catch                           = ignore

# Add or remove space between 'finally' and '{' if on the same line
sp_finally_brace                         = ignore

# Add or remove space between '}' and 'finally' if on the same line
sp_brace_finally                         = ignore

# Add or remove space between 'try' and '{' if on the same line
sp_try_brace                             = ignore

# Add or remove space between get/set and '{' if on the same line
sp_getset_brace                          = ignore

# Add or remove space before the '::' operator
sp_before_dc                             = ignore

# Add or remove space after the '::' operator
sp_after_dc                              = ignore

# Add or remove around the D named array initializer ':' operator
sp_d_array_colon                         = ignore

# Add or remove space after the '!' (not) operator.
sp_not                                   = remove

# Add or remove space after the '~' (invert) operator.
sp_inv                                   = remove

# Add or remove space after the '&' (address-of) operator.
# This does not affect the spacing after a '&' that is part of a type.
sp_addr                                  = remove

# Add or remove space around the '.' or '->' operators
sp_member                                = remove

# Add or remove space after the '*' (dereference) operator.
# This does not affect the spacing after a '*' that is part of a type.
sp_deref                                 = remove

# Add or remove space after '+' or '-', as in 'x = -5' or 'y = +7'
sp_sign                                  = remove

# Add or remove space before or after '++' and '--', as in '(--x)' or 'y++;'
sp_incdec                                = remove

# Add or remove space before a backslash-newline at the end of a line
sp_before_nl_cont                        = add   

# Add or remove space around the ':' in 'b ? t : f'
sp_cond_colon                            = add

# Add or remove space around the '?' in 'b ? t : f'
sp_cond_question                         = add

# Fix the spacing between 'case' and the label. Only 'ignore' and 'force' make sense here.
sp_case_label                            = ignore

# Control the space around the D '..' operator.
sp_range                                 = ignore

# Control the space after the opening of a C++ comment '// A' vs '//A'
sp_cmt_cpp_start                         = ignore

# Whether to keep non-indenting tabs
align_keep_tabs								= false

# Whether to use tabs for alinging
align_with_tabs								= true

# Whether to bump out to the next tab when aligning
align_on_tabstop							= true

# Whether to left-align numbers
align_number_left							= false

# Align variable definitions in prototypes and functions
align_func_params							= false

# Align parameters in single-line functions that have the same name.
# The function names must already be aligned with each other.
align_same_func_call_params					= false

# The span for aligning variable definitions (0=don't align)
align_var_def_span							= 0

# How to align the star in variable definitions.
#  0=Part of the type     'void *   foo;'
#  1=Part of the variable 'void     *foo;'
#  2=Dangling             'void    *foo;'
align_var_def_star_style                 = 0

# How to align the '&' in variable definitions.
#  0=Part of the type
#  1=Part of the variable
#  2=Dangling
align_var_def_amp_style                  = 0

# The threshold for aligning variable definitions (0=no limit)
align_var_def_thresh                     = 0

# The gap for aligning variable definitions
align_var_def_gap                        = 0

# Whether to align the colon in struct bit fields
align_var_def_colon                      = false

# Whether to align inline struct/enum/union variable definitions
align_var_def_inline                     = false

# The span for aligning on '=' in assignments (0=don't align)
align_assign_span                        = 0

# The threshold for aligning on '=' in assignments (0=no limit)
align_assign_thresh                      = 0

# The span for aligning on '=' in enums (0=don't align)
align_enum_equ_span                      = 0

# The threshold for aligning on '=' in enums (0=no limit)
align_enum_equ_thresh                    = 0

# The span for aligning struct/union (0=don't align)
align_var_struct_span                    = 0

# The threshold for aligning struct/union member definitions (0=no limit)
align_var_struct_thresh                  = 0

# The gap for aligning struct/union member definitions
align_var_struct_gap                     = 0

# The span for aligning struct initializer values (0=don't align)
align_struct_init_span                   = 0

# The minimum space between the type and the synonym of a typedef
align_typedef_gap                        = 0

# The span for aligning single-line typedefs (0=don't align)
align_typedef_span                       = 0

# How to align typedef'd functions with other typedefs
# 0: Don't mix them at all
# 1: align the open paren with the types
# 2: align the function type name with the other type names
align_typedef_func                       = 0

# Controls the positioning of the '*' in typedefs. Just try it.
# 0: Align on typdef type, ignore '*'
# 1: The '*' is part of type name: typedef int  *pint;
# 2: The '*' is part of the type, but dangling: typedef int *pint;
align_typedef_star_style                 = 0

# Controls the positioning of the '&' in typedefs. Just try it.
# 0: Align on typdef type, ignore '&'
# 1: The '&' is part of type name: typedef int  &pint;
# 2: The '&' is part of the type, but dangling: typedef int &pint;
align_typedef_amp_style                  = 0

# The span for aligning comments that end lines (0=don't align)
align_right_cmt_span                     = 0

# If aligning comments, mix with comments after '}' and #endif with less than 3 spaces before the comment
align_right_cmt_mix                      = false

# If a trailing comment is more than this number of columns away from the text it follows,
# it will qualify for being aligned.
align_right_cmt_gap                      = 0

# The span for aligning function prototypes (0=don't align)
align_func_proto_span                    = 0

# Minimum gap between the return type and the function name.
align_func_proto_gap                     = 0

# Align function protos on the 'operator' keyword instead of what follows
align_on_operator                        = false

# Whether to mix aligning prototype and variable declarations.
# If true, align_var_def_XXX options are used instead of align_func_proto_XXX options.
align_mix_var_proto                      = false

# Align single-line functions with function prototypes, uses align_func_proto_span
align_single_line_func                   = false

# Aligning the open brace of single-line functions.
# Requires align_single_line_func=true, uses align_func_proto_span
align_single_line_brace                  = false

# Gap for align_single_line_brace.
align_single_line_brace_gap              = 0

# Whether to align macros wrapped with a backslash and a newline.
# This will not work right if the macro contains a multi-line comment.
align_nl_cont                            = false

# The minimum space between label and value of a preprocessor define
align_pp_define_gap                      = 0

# The span for aligning on '#define' bodies (0=don't align)
align_pp_define_span                     = 0

# Align lines that start with '<<' with previous '<<'. Default=true
align_left_shift                         = true


# Newline adding and removing options


# Whether to collapse empty blocks between '{' and '}'
nl_collapse_empty_body                   = false

# Don't split one-line braced assignments - 'foo_t f = { 1, 2 };'
nl_assign_leave_one_liners               = false

# Don't split one-line braced statements inside a class xx { } body
nl_class_leave_one_liners                = false

# Don't split one-line enums: 'enum foo { BAR = 15 };'
nl_enum_leave_one_liners                 = false

# Don't split one-line get or set functions
nl_getset_leave_one_liners               = false

# Don't split one-line function definitions - 'int foo() { return 0; }'
nl_func_leave_one_liners                 = false

# Don't split one-line if/else statements - 'if(a) b++;'
nl_if_leave_one_liners                   = false

# Add or remove newlines at the start of the file
nl_start_of_file                         = add

# The number of newlines at the start of the file (only used if nl_start_of_file is 'add' or 'force'
nl_start_of_file_min                     = 1

# Add or remove newline at the end of the file
nl_end_of_file                           = add

# The number of newlines at the end of the file (only used if nl_end_of_file is 'add' or 'force')
nl_end_of_file_min                       = 1

# Add or remove newline between '=' and '{'
nl_assign_brace                          = ignore

# Add or remove newline between '=' and '[' (D only)
nl_assign_square                         = ignore

# Add or remove newline after '= [' (D only). Will also affect the newline before the ']'
nl_after_square_assign                   = ignore

# The number of newlines after a block of variable definitions
nl_func_var_def_blk                      = 0

# Add or remove newline between a function call's ')' and '{', as in:
# list_for_each(item, &list) { }
nl_fcall_brace                           = remove

# Add or remove newline between 'enum' and '{'
nl_enum_brace                            = ignore

# Add or remove newline between 'struct and '{'
nl_struct_brace                          = ignore

# Add or remove newline between 'union' and '{'
nl_union_brace                           = ignore

# Add or remove newline between 'if' and '{'
nl_if_brace                              = remove

# Add or remove newline between '}' and 'else'
nl_brace_else                            = force

# Add or remove newline between 'else if' and '{'
# If set to ignore, nl_if_brace is used instead
nl_elseif_brace                          = ignore

# Add or remove newline between 'else' and '{'
nl_else_brace                            = ignore

# Add or remove newline between 'else' and 'if'
nl_else_if                               = ignore

# Add or remove newline between '}' and 'finally'
nl_brace_finally                         = ignore

# Add or remove newline between 'finally' and '{'
nl_finally_brace                         = ignore

# Add or remove newline between 'try' and '{'
nl_try_brace                             = ignore

# Add or remove newline between get/set and '{'
nl_getset_brace                          = ignore

# Add or remove newline between 'for' and '{'
nl_for_brace                             = remove

# Add or remove newline between 'catch' and '{'
nl_catch_brace                           = ignore

# Add or remove newline between '}' and 'catch'
nl_brace_catch                           = ignore

# Add or remove newline between 'while' and '{'
nl_while_brace                           = remove

# Add or remove newline between 'do' and '{'
nl_do_brace                              = remove

# Add or remove newline between '}' and 'while' of 'do' statement
nl_brace_while                           = ignore

# Add or remove newline between 'switch' and '{'
nl_switch_brace                          = remove

# Add a newline between ')' and '{' if the ')' is on a different line than the if/for/etc.
# Overrides nl_for_brace, nl_if_brace, nl_switch_brace, nl_while_switch, and nl_catch_brace.
nl_multi_line_cond                       = false

# Force a newline in a define after the macro name for multi-line defines.
nl_multi_line_define                     = false

# Whether to put a newline before 'case' statement
nl_before_case                           = false

# Add or remove newline between ')' and 'throw'
nl_before_throw                          = ignore

# Whether to put a newline after 'case' statement
nl_after_case                            = false

# Newline between namespace and {
nl_namespace_brace                       = ignore

# Add or remove newline between 'template<>' and whatever follows.
nl_template_class                        = ignore

# Add or remove newline between 'class' and '{'
nl_class_brace                           = ignore

# Add or remove newline after each ',' in the constructor member initialization
nl_class_init_args                       = ignore

# Add or remove newline between return type and function name in definition
nl_func_type_name                        = add

# Add or remove newline between function scope and name in a definition
# Controls the newline after '::' in 'void A::f() { }'
nl_func_scope_name                       = ignore

# Add or remove newline between return type and function name in a prototype
nl_func_proto_type_name                  = add

# Add or remove newline between a function name and the opening '('
nl_func_paren                            = ignore

# Add or remove newline after '(' in a function declaration
nl_func_decl_start                       = ignore

# Add or remove newline after each ',' in a function declaration
nl_func_decl_args                        = ignore

# Add or remove newline before the ')' in a function declaration
nl_func_decl_end                         = ignore

# Add or remove newline between function signature and '{'
nl_fdef_brace                            = remove

# Whether to put a newline after 'return' statement
nl_after_return                          = false

# Add or remove a newline between the return keyword and return expression.
nl_return_expr                           = ignore

# Whether to put a newline after semicolons, except in 'for' statements
nl_after_semicolon                       = false

# Whether to put a newline after brace open.
# This also adds a newline before the matching brace close.
nl_after_brace_open                      = false

# If nl_after_brace_open and nl_after_brace_open_cmt are true, a newline is
# placed between the open brace and a trailing single-line comment.
nl_after_brace_open_cmt                  = false

# Whether to put a newline after a virtual brace open.
# These occur in un-braced if/while/do/for statement bodies.
nl_after_vbrace_open                     = false

# Whether to put a newline after a brace close.
# Does not apply if followed by a necessary ';'.
nl_after_brace_close                     = false

# Whether to alter newlines in '#define' macros
nl_define_macro                          = false

# Whether to not put blanks after '#ifxx', '#elxx', or before '#endif'
nl_squeeze_ifdef                         = false

# Add or remove newline before 'if'
nl_before_if                             = ignore

# Add or remove newline after 'if'
nl_after_if                              = ignore

# Add or remove newline before 'for'
nl_before_for                            = ignore

# Add or remove newline after 'for'
nl_after_for                             = ignore

# Add or remove newline before 'while'
nl_before_while                          = ignore

# Add or remove newline after 'while'
nl_after_while                           = ignore

# Add or remove newline before 'switch'
nl_before_switch                         = ignore

# Add or remove newline after 'switch'
nl_after_switch                          = ignore

# Add or remove newline before 'do'
nl_before_do                             = ignore

# Add or remove newline after 'do'
nl_after_do                              = ignore

# Whether to double-space commented-entries in struct/enum
nl_ds_struct_enum_cmt                    = false

# Whether to double-space before the close brace of a struct/union/enum
nl_ds_struct_enum_close_brace            = false

# Add or remove a newline around a class colon.
# Related to pos_class_colon, nl_class_init_args, and pos_comma.
nl_class_colon                           = ignore

# Change simple unbraced if statements into a one-liner
# 'if(b)\n i++;' => 'if(b) i++;'
nl_create_if_one_liner                   = false

# Change simple unbraced for statements into a one-liner
# 'for (i=0;i<5;i++)\n foo(i);' => 'for (i=0;i<5;i++) foo(i);'
nl_create_for_one_liner                  = false

# Change simple unbraced while statements into a one-liner
# 'while (i<5)\n foo(i++);' => 'while (i<5) foo(i++);'
nl_create_while_one_liner                = false



# Positioning options

# The position of arithmetic operators in wrapped expressions
pos_arith                                = ignore   # ignore/lead/trail

# The position of assignment in wrapped expressions
pos_assign                               = ignore   # ignore/lead/trail

# The position of boolean operators in wrapped expressions
pos_bool                                 = ignore   # ignore/lead/trail

# The position of the comma in wrapped expressions
pos_comma                                = ignore   # ignore/lead/trail

# The position of the comma in the constructor initialization list
pos_class_comma                          = ignore   # ignore/lead/trail

# The position of colons between constructor and member initialization
pos_class_colon                          = ignore   # ignore/lead/trail


# Line Splitting options

code_width                               = 0
ls_for_split_full                        = false
ls_func_split_full                       = false


# Blank line options

nl_max                                   = 0
nl_after_func_proto                      = 0
nl_after_func_proto_group                = 0
nl_after_func_body                       = 0
nl_after_func_body_one_liner             = 0
nl_before_block_comment                  = 0
nl_before_c_comment                      = 0
nl_before_cpp_comment                    = 0
nl_after_multiline_comment               = false
nl_before_access_spec                    = 0
nl_after_access_spec                     = 0
nl_comment_func_def                      = 0
nl_after_try_catch_finally               = 0
eat_blanks_after_open_brace              = false
eat_blanks_before_close_brace            = false



# Code modifying options (non-whitespace)


# Add or remove braces on single-line 'do' statement
mod_full_brace_do                        = ignore

# Add or remove braces on single-line 'for' statement
mod_full_brace_for                       = add

# Add or remove braces on single-line function defintions. (Pawn)
mod_full_brace_function                  = ignore

# Add or remove braces on single-line 'if' statement. Will not remove the braces if they contain an 'else'.
mod_full_brace_if                        = add

# Don't remove braces around statements that span N newlines
mod_full_brace_nl                        = 0

# Add or remove braces on single-line 'while' statement
mod_full_brace_while                     = add

# Add or remove unnecessary paren on 'return' statement
mod_paren_on_return                      = ignore

# Whether to change optional semicolons to real semicolons
mod_pawn_semicolon                       = false

# Add parens on 'while' and 'if' statement around bools
mod_full_paren_if_bool                   = true

# Whether to remove superfluous semicolons
mod_remove_extra_semicolon               = false

# If a function body exceeds the specified number of newlines and doesn't have a comment after
# the close brace, a comment will be added.
mod_add_long_function_closebrace_comment = 0

# If a switch body exceeds the specified number of newlines and doesn't have a comment after
# the close brace, a comment will be added.
mod_add_long_switch_closebrace_comment   = 0

# If TRUE, will sort consecutive single-line '#include' statements [C/C++] and '#import' statements [Obj-C]
# This is generally a bad idea, as it may break your code.
mod_sort_include                         = false

# If TRUE, it will move a 'break' that appears after a fully braced 'case' before the close brace.
mod_move_case_break                      = false

# If TRUE, it will remove a void 'return;' that appears as the last statement in a function.
mod_remove_empty_return                  = false


# Comment modifications

cmt_width                                = 0
cmt_indent_multi                         = true
cmt_c_group                              = false
cmt_c_nl_start                           = false
cmt_c_nl_end                             = false
cmt_cpp_group                            = false
cmt_cpp_nl_start                         = false
cmt_cpp_nl_end                           = false
cmt_cpp_to_c                             = false
cmt_star_cont                            = false
cmt_sp_before_star_cont                  = 0
cmt_sp_after_star_cont                   = 0
cmt_multi_check_last                     = true
cmt_insert_file_header                   = ""
cmt_insert_file_footer                   = ""
cmt_insert_func_header                   = ""
cmt_insert_class_header                  = ""
cmt_insert_before_preproc                = false


# Preprocessor options

pp_indent                                = ignore
pp_indent_at_level                       = false
pp_indent_count                          = 1
pp_space                                 = ignore
pp_space_count                           = 0
pp_indent_region                         = 0
pp_region_indent_code                    = false
pp_indent_if                             = 0
pp_if_indent_code                        = false
pp_define_at_level                       = false

# Objective-C specifics

align_oc_decl_colon           = false
align_oc_msg_spec_span        = 0
align_oc_msg_colon_span       = 0
#align_oc_msg_colon = true
#align_oc_msg_on_first_colon = true
#align_oc_msg_string_literal = false

sp_after_oc_scope            = remove
sp_after_oc_type             = remove
sp_after_oc_return_type      = force
sp_before_oc_colon           = remove
sp_after_oc_colon            = remove
sp_before_send_oc_colon      = remove
sp_after_send_oc_colon       = remove
sp_before_oc_block_caret     = remove
sp_after_oc_block_caret      = remove
sp_after_oc_at_sel           = remove
sp_inside_oc_at_sel_parens   = remove
sp_after_oc_at_sel_parens    = force
